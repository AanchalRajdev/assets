name: Validate filenames & JSON informations

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Collecting file paths
        run: |
          echo "FILE_PATHS=$(find ./tokens -type f -name '*info.json' -printf '%p,'| sed 's/,$//' )" >> $GITHUB_ENV
        shell: bash
      - id: files
        name: Validate filenames
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'
      - run: |
          readarray -t files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.added }}')"
          for file in ${files[@]}; do
            if [[ ${file} != *"/info.json"* && ${file} != *"/logo.png"* && ${file} != *"/logo.svg"* ]]; then
              echo "Filename ${file} isn't expected!"
              exit 1
            fi
            DIR=`dirname $file`
          done
          urls=( "https://api.elrond.com/" "https://testnet-api.elrond.com/" "https://devnet-api.elrond.com/")
          for url in ${urls[@]}; do
            API_TOKEN_URL="$url" 
            API_TOKEN_URL+="tokens/"
            API_TOKEN_URL+="$DIR"
            API_COLLECTION_URL="$url"
            API_COLLECTION_URL+="collections/"
            API_COLLECTION_URL+="$DIR"

            HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null "$API_TOKEN_URL")
            if [[ ${HTTP_STATUS} == 200 ]]; then
              exit 0
            fi
            echo "Failed fetching from $API_TOKEN_URL"
            
            HTTP_STATUS=$(curl -s -w "%{http_code}" -o /dev/null "$API_COLLECTION_URL")
            if [[ ${HTTP_STATUS} == 200 ]]; then
              exit 0
            fi
            echo "Failed fetching from $API_COLLECTION_URL"
          done

          exit 1
        shell: bash
      - name: Validate JSON
        uses: docker://orrosenblatt/validate-json-action:latest
        env:
          INPUT_SCHEMA: ./schema.json
          INPUT_JSONS: ${{ env.FILE_PATHS }}
        